tools:
  - name: attach_policy_to_user
    alias: attach-policy-to-user
    description: Create a new customer managed policy and attach it to the IAM user associated with the given email, requires approval from an admin
    type: python
    content: |
      import os
      import sqlite3
      import sys
      import boto3
      from botocore.exceptions import ClientError
      import json
      from datetime import datetime, timedelta

      def check_approval_status(user_email, policy_name):
          conn = sqlite3.connect('/data/approval_requests.db')
          c = conn.cursor()
          
          # Check for an approved request that hasn't expired
          current_time = datetime.now()
          c.execute("""
              SELECT * FROM approvals 
              WHERE user_email=? AND policy_name=? AND approved='approved' 
              AND approval_time > ?
          """, (user_email, policy_name, current_time - timedelta(hours=24)))
          
          approval = c.fetchone()
          conn.close()
          return approval is not None

      USER_EMAIL = os.getenv('KUBIYA_USER_EMAIL')
      AWS_PROFILE = os.getenv('AWS_PROFILE')

      if not USER_EMAIL:
          print("Missing KUBIYA_USER_EMAIL environment variable")
          sys.exit(1)

      if not AWS_PROFILE:
          print("Missing AWS_PROFILE environment variable")
          sys.exit(1)

      policy_name = "{{.policy_name}}"
      policy_json = "{{.policy_json}}"

      if not check_approval_status(USER_EMAIL, policy_name):
          print(f"User {USER_EMAIL} does not have approval to perform the requested operation.")
          sys.exit(1)

      # Initialize boto3 session using the specified profile
      session = boto3.Session(profile_name=AWS_PROFILE)

      # Initialize boto3 client
      iam_client = session.client('iam')

      try:
          # First, try to get the user directly by username (assuming email is the username)
          try:
              user = iam_client.get_user(UserName=USER_EMAIL)
              target_user = user['User']
          except iam_client.exceptions.NoSuchEntityException:
              # If the user is not found, search through all users
              paginator = iam_client.get_paginator('list_users')
              target_user = None
              for page in paginator.paginate():
                  for user in page['Users']:
                      tags = iam_client.list_user_tags(UserName=user['UserName'])['Tags']
                      for tag in tags:
                          if tag['Key'] == 'Email' and tag['Value'] == USER_EMAIL:
                              target_user = user
                              break
                      if target_user:
                          break
                  if target_user:
                      break

          if not target_user:
              print(f"Error: No IAM user found with email {USER_EMAIL}")
              sys.exit(1)

          user_name = target_user['UserName']
          print(f"Found IAM user: {user_name}")

          # Create the customer managed policy
          policy_document = json.loads(policy_json)
          response = iam_client.create_policy(
              PolicyName=policy_name,
              PolicyDocument=json.dumps(policy_document)
          )
          policy_arn = response['Policy']['Arn']
          print(f"Created policy: {policy_arn}")

          # Attach the customer managed policy to the user
          iam_client.attach_user_policy(
              UserName=user_name,
              PolicyArn=policy_arn
          )
          print(f"Policy {policy_name} attached to user {user_name} successfully.")

      except ClientError as e:
          print(f"Error: {e}")
      except json.JSONDecodeError as e:
          print(f"Error parsing policy JSON: {e}")
    dependencies: |
      boto3
    args:
      policy_name:
        description: The name of the customer managed policy to create
        required: true
      policy_json:
        description: The JSON policy to apply to the customer managed policy - best to pass this as an environment variable eg. `$POLICY_JSON` after setting the variable in the environment
        required: true
    env:
      - KUBIYA_USER_EMAIL # The email address of the user requesting the operation (injected automatically by Kubiya)
      - AWS_PROFILE # The AWS profile to use for the operation (injected automatically by Kubiya)
    # Volumes and files to mount in the container for the database persistence
    with_volumes:
      - name: sqlite_data
        path: /data